name: Create Github Release

on:
  workflow_call:
    inputs:
      release-notes:
        description: Release notes to add to the release
        type: string
        default: ""

jobs:
  create-github-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "$(gh release view '${{ github.ref_name }}' 2>&1)" == "release not found" ]]; then
            gh release create '${{ github.ref_name }}' --repo '${{ github.repository }}' --notes "${{ inputs.release-notes }}"
          fi
      - name: Upload metadata.yml to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Upload metadata.yml to GitHub Release using the `gh` CLI.
        run: >-
          gh release upload
          '${{ github.ref_name }}' metadata.yml
          --repo '${{ github.repository }}'
  create-driver-index-release:
      runs-on: ubuntu-latest
      needs: create-github-release
      steps:
        - name: Driver Index login
          run: |
            echo "DI_KNOX_TOKEN=$(curl -s --request POST \
              --url "${{ vars.DI_BASE_URL }}/auth/login/" \
              -H "Authorization: Basic ${{ secrets.DI_BASIC_AUTH_TOKEN }}" | jq '.token' -r)" >> $GITHUB_ENV
        - name: Get ID of driver entry in DI
          env:
            REPO_URL: ${{ github.server_url }}/${{ github.repository }}
          run: |
            DI_DRIVER_ID=$(curl -s --url "${{ vars.DI_BASE_URL }}/drivers/" \
              -H "Authorization: Token $DI_KNOX_TOKEN" \
              | jq ".[] | select(.repository_link == \"$REPO_URL\") | .id")

            if [[ $DI_DRIVER_ID == '' ]]; then
              echo "::error::Driver not found" && exit 1
            else
              echo "Driver found with ID $DI_DRIVER_ID"
              echo "DI_DRIVER_ID=$DI_DRIVER_ID" >> $GITHUB_ENV
            fi
        - name: Add release to Driver Index
          env:
            GH_TOKEN: ${{ github.token }}
          run: |
            gh release view --repo "${GITHUB_REPOSITORY}" --json tagName,publishedAt,zipballUrl \
              | jq -c --arg driver "$DI_DRIVER_ID" '{release_date: .publishedAt, version: .tagName, download_link: .zipballUrl, driver: $driver}' \
              | curl --fail --url "${{ vars.DI_BASE_URL }}/driver_releases/" --request POST \
                -H "Authorization: Token $DI_KNOX_TOKEN" \
                -H "Content-Type: application/json" \
                --data-binary @-
        - name: Driver Index logout
          if: always()
          run: |
            curl --request POST --url "${{ vars.DI_BASE_URL }}/auth/logout/" -H "Authorization: Token $DI_KNOX_TOKEN"
